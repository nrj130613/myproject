# -*- coding: utf-8 -*-
"""Copy of CRF contest 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lmgmf9tYoSL4vonKIYAnZUvayBQ2Hqy8

# 1. Download Data
"""

!pip install sklearn-crfsuite

!gdown 1LHZe1etwxaKnP6TWTbDscasBe5pGykjJ

!head train_auto_tok.tsv

!gdown 1LtdB8q2xVhK7vivJxTU6yYnl3KTG-QGS

def load_data(file_name):
    with open(file_name, 'r') as f:
        lines = f.read().splitlines()

    X, Y = [], []
    sentence, labels = [], []
    for line in lines:
        if not line:
            if sentence:
                X.append(sentence)
                Y.append(labels)
                sentence, labels = [], []
        else:
            word, tag = line.split('\t')
            sentence.append(word)
            labels.append(tag)
    if sentence:
        X.append(sentence)
        Y.append(labels)

    return (X, Y)

Xtrain, Ytrain = load_data('train_auto_tok.tsv')
Xtest, Ytest = load_data('dev_auto_tok.tsv')

import sklearn_crfsuite
import sklearn_crfsuite.metrics

"""# 2. Feature Engineering"""

!pip install pythainlp

from pythainlp import (
    thai_lead_vowels,
    thai_follow_vowels,
    thai_above_vowels,
    thai_below_vowels,
    thai_consonants,
    thai_vowels,
    thai_tonemarks,
    thai_signs,
    thai_digits,
    thai_punctuations)

consonants = set(thai_consonants)
vowels = set(thai_vowels)
tonemarks = set(thai_tonemarks)
punc = set(thai_punctuations)

"""# Orthographical Features"""

def featurize(sentence):
    feature_seq = []
    feature_dict_seq = []
    for i, token in enumerate(sentence):
        feature_dict = {}
        # word identity feature
        feature_dict['word'] = token
        # position features
        feature_dict['bias'] = 1.0
        feature_dict['pos'] = i
        feature_dict['pos_inv'] = len(sentence) - i
        feature_dict_seq.append(feature_dict)
    feature_seq.append(feature_dict_seq)
    return feature_seq

from sklearn_crfsuite import CRF, metrics

def train_and_evaluate(Xtrain, Ytrain, Xtest, Ytest):
    X_train_feats = []
    X_test_feats = []
    for sent in Xtrain:
        X_train_feats.append(featurize(sent))
    for sent in Xtest:
        X_test_feats.append(featurize(sent))
    crf = CRF()
    crf.fit(X_train_feats, Ytrain)
    y_pred = crf.predict(X_test_feats)
    f1_score = metrics.flat_f1_score(Ytest, y_pred, average='weighted', labels=crf.classes_, zero_division=1)
    return f1_score

sample = Xtrain[1]

featurize(sample)

"""# 3. Train and evaluate models"""

from sklearn_crfsuite import CRF, metrics

def featurize(sentence):
    feature_seq = []
    for i, token in enumerate(sentence):
        feature_dict = {}
        # word identity feature
        feature_dict['word'] = token
        # position features
        feature_dict['bias'] = 1.0
        feature_seq.append(feature_dict)
    return feature_seq

def train_and_evaluate(Xtrain, Ytrain, Xtest, Ytest):
    X_train_feats = [featurize(sent) for sent in Xtrain]
    X_test_feats = [featurize(sent) for sent in Xtest]
    crf = CRF()
    crf.fit(X_train_feats, Ytrain)
    y_pred = crf.predict(X_test_feats)
    f1_score = metrics.flat_f1_score(Ytest, y_pred, average='weighted', labels=crf.classes_, zero_division=1)
    return f1_score

train_and_evaluate(Xtrain[0:20000], Ytrain[0:20000], Xtest[0:20000], Ytest[0:20000])