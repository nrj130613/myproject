# -*- coding: utf-8 -*-
"""CRF contest 3 pos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1im0RMqpPS6XCNvZmXcRFIHWv_Zr1nu5B

# 1. Download Data
"""

!pip install sklearn-crfsuite

!gdown 1LHZe1etwxaKnP6TWTbDscasBe5pGykjJ

!head train_auto_tok.tsv

!gdown 1LtdB8q2xVhK7vivJxTU6yYnl3KTG-QGS

def load_data(file_name):
    with open(file_name, 'r') as f:
        lines = f.read().splitlines()

    X, Y = [], []
    sentence, labels = [], []
    for line in lines:
        if not line:
            if sentence:
                X.append(sentence)
                Y.append(labels)
                sentence, labels = [], []
        else:
            word, tag = line.split('\t')
            sentence.append(word)
            labels.append(tag)
    if sentence:
        X.append(sentence)
        Y.append(labels)

    return (X, Y)

Xtrain, Ytrain = load_data('train_auto_tok.tsv')
Xtest, Ytest = load_data('dev_auto_tok.tsv')

Xtrain

import sklearn_crfsuite
import sklearn_crfsuite.metrics

"""# 2. Feature Engineering"""

!pip install pythainlp

"""# POS Features

"""

import pythainlp
from pythainlp.tag import pos_tag

def pos_tagging(sentences):
  sents_pos = []
  for i in range(len(sentences)):
    #for sent in sentences[i]:
    each_sent_pos = pos_tag(sentences[i])

    sents_pos.append(each_sent_pos)
  return sents_pos

test = pos_tagging(Xtrain[0:5])
test

def pos_featurize(sent):
  features = {}
  for i in range(len(sent)):
    word, pos = sent[i]
    features["{}_{}_pos".format(word, i)] = pos

  return features

feature_function_list = [pos_featurize]

"""# 3. Train and evaluate models"""

train_set_pos = pos_tagging(Xtrain[0:10])
test_set_pos = pos_tagging(Xtest[0:10])

import sklearn_crfsuite

from sklearn_crfsuite import metrics

def train_and_evaluate(Xtrain, Ytrain, Xtest, Ytest, feature_function_list):
    X_train_feats = [pos_featurize(sent) for sent in Xtrain]
    X_test_feats = [pos_featurize(sent) for sent in Xtest]
    crf = sklearn_crfsuite.CRF()
    crf.fit(X_train_feats, Ytrain)
    y_pred = crf.predict(X_test_feats)
    f1_score = metrics.flat_f1_score(Ytest, y_pred, average='weighted', labels=crf.classes_, zero_division=1)
    return f1_score

train_and_evaluate(train_set_pos, Ytrain[0:10], test_set_pos, Ytest[0:10], [pos_featurize])