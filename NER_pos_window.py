# -*- coding: utf-8 -*-
"""CRF contest word window.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AFtkkmMvuksrYsOCMR5cobpsKfnzWyiL

# Word window bigram

# 1. Download Data
"""

!pip install sklearn-crfsuite

!gdown 1LHZe1etwxaKnP6TWTbDscasBe5pGykjJ

!head train_auto_tok.tsv

!gdown 1LtdB8q2xVhK7vivJxTU6yYnl3KTG-QGS

def load_data(file_name):
    with open(file_name, 'r') as f:
        lines = f.read().splitlines()

    X, Y = [], []
    sentence, labels = [], []
    for line in lines:
        if not line:
            if sentence:
                X.append(sentence)
                Y.append(labels)
                sentence, labels = [], []
        else:
            word, tag = line.split('\t')
            sentence.append(word)
            labels.append(tag)
    if sentence:
        X.append(sentence)
        Y.append(labels)

    return (X, Y)

Xtrain, Ytrain = load_data('train_auto_tok.tsv')
Xtest, Ytest = load_data('dev_auto_tok.tsv')

Xtrain

import sklearn_crfsuite
import sklearn_crfsuite.metrics

with open("test_set.txt") as file:
    lines = [line.rstrip() for line in file]
print(lines)

test_set = []
for line in lines:
  each_line = line.split("|")
  test_set.append(each_line)
print(test_set[0:10])

"""# 2. Feature Engineering

## Task 1: Implement orthographical features

Feature function 3 ตัว ซึ่งเราออกแบบให้มี function header ที่เหมือนกันคือ `i, tokens` ตำแหน่ง token ที่ต้องการคำนวณ feature และ list ของ tuple (word, pos tag)

*  Is the first letter of the word capitalized?
*  Are the entire words capitalized?
*  What is the shape of the word in general?

`feature_dict`  should look like this

`
  {
    'feature_name': 'feature_value',
    'feature_name2': 'feature_value',
  }
  `
"""

!pip install pythainlp

import pythainlp
from pythainlp.tag import pos_tag

def pos_tagging(sentences):
  sents_pos = []
  for i in range(len(sentences)):
    #for sent in sentences[i]:
    each_sent_pos = pos_tag(sentences[i])

    sents_pos.append(each_sent_pos)
  return sents_pos

test = pos_tagging(Xtrain[0:3])

def featurize(sent, window_size):
    feature_seq = []
    for i in range(len(sent)):
        word, pos = sent[i]
        features = {}
        features["{}_{}_pos".format(word, i)] = pos
        for j in range(1, window_size + 1):
            if i - j >= 0:
                features['prev_word_pos_{}'.format(j)] = sent[i-j][1]
            if i + j < len(sent):
                features['next_word_pos_{}'.format(j)] = sent[i+j][1]
            if i - j >= 0 and i + j < len(sent):
                features['conjunctive_pos_{}'.format(j)] = sent[i-j][1] + '_' + pos + '_' + sent[i+j][1]

        features['word'] = word
        for j in range(1, window_size + 1):
            if i - j >= 0:
                features['prev_word_{}'.format(j)] = sent[i-j][0]
            if i + j < len(sent):
                features['next_word_{}'.format(j)] = sent[i+j][0]
            if i - j >= 0 and i + j < len(sent):
                features['conjunctive_{}'.format(j)] = sent[i-j][0] + '_' + word + '_' + sent[i+j][0]

        features['token_{}'.format(word, i)] = word.isdigit()

        feature_seq.append(features)

    return feature_seq

sample = Xtrain[1]

sample

test

featurize(test[1], 2)

"""# 3. Train and evaluate models

วิธีการเริ่มทำ project machine learning คือ ควรจะลองรัน model แบบที่ง่ายที่สุด เพื่อทดสอบ workflow ตั้งแต่ load data ไปจนถึง evaluation จากนั้นค่อยวกกลับมาเพิ่ม feature เพื่อพัฒนา model ให้แม่นขึ้น

## Task 2: เขียน function สำหรับการ train และ evaluate

* featurize training set และ dev set
* fit CRF
* Evaluate the results on the dev set
* return accuracy
"""

from sklearn_crfsuite import CRF, metrics

def train_and_evaluate(Xtrain, Ytrain, Xtest, Ytest):
    X_train_feats = [featurize(sent, 2) for sent in Xtrain]
    X_test_feats = [featurize(sent, 2) for sent in Xtest]
    crf = CRF()
    crf.fit(X_train_feats, Ytrain)
    y_pred = crf.predict(X_test_feats)
    #f1_score = metrics.flat_f1_score(Ytest, y_pred, average='weighted', labels=crf.classes_, zero_division=1)
    return y_pred

from sklearn_crfsuite import CRF, metrics

def train_and_evaluate(Xtrain, Ytrain, Xtest):
    X_train_feats = [featurize(sent, 3) for sent in Xtrain]
    X_test_feats = [featurize(sent, 3) for sent in Xtest]
    crf = CRF()
    crf.fit(X_train_feats, Ytrain)
    y_pred = crf.predict(X_test_feats)
    #f1_score = metrics.flat_f1_score(Ytest, y_pred, average='weighted', labels=crf.classes_, zero_division=1)
    return y_pred

import json

train_set_pos = pos_tagging(Xtrain)
test_set_pos = pos_tagging(Xtest)

y_pred = train_and_evaluate(train_set_pos, Ytrain, test_set_pos)

predicted = []
for i in range(len(Xtest)):
    each = list(zip(Xtest[i], y_pred[i]))
    predicted.append(each)

def extract_entities(sentence):

    entities = []
    entity_sofar = []
    type_sofar = None
    tokens = []
    for token, ner_tag in sentence:
        tokens.append(token)
        if ner_tag[0] == 'B':
            if type_sofar is not None:
                entities.append((type_sofar, ''.join(entity_sofar)))
                entity_sofar = []
                type_sofar = None
            if len(ner_tag) > 1:
                _, tag = ner_tag.split('_')
                type_sofar = tag
                entity_sofar.append(token)
            else:
                type_sofar = 'MISC'
                entity_sofar.append(token)

        elif ner_tag[0] == 'I':
            if len(ner_tag) > 1:
                _, tag = ner_tag.split('_')
                type_sofar = tag
            entity_sofar.append(token)
        elif ner_tag[0] == 'E':
            entity_sofar.append(token)
            entities.append((type_sofar, ''.join(entity_sofar)))
            entity_sofar = []
            type_sofar = None
        elif ner_tag == 'O':
            if len(entity_sofar) != 0:
                entities.append((type_sofar, ''.join(entity_sofar)))
                entity_sofar = []
                type_sofar = None
    return entities
    #return ''.join(tokens), [(t, x) for t, x in entities if t is not None]

output_list = list(map(extract_entities, predicted))

print(output_list)

import json

len(output_list)

json.dump(output_list, open('predicted_test_entities.json', encoding='utf8', mode='w'))

"""# Word window trigram"""

from sklearn_crfsuite import CRF, metrics

def train_and_evaluate_trigram(Xtrain, Ytrain, Xtest, Ytest):
    X_train_feats = [featurize(sent, 3) for sent in Xtrain]
    X_test_feats = [featurize(sent, 3) for sent in Xtest]
    crf = CRF()
    crf.fit(X_train_feats, Ytrain)
    y_pred = crf.predict(X_test_feats)
    f1_score = metrics.flat_f1_score(Ytest, y_pred, average='weighted', labels=crf.classes_, zero_division=1)
    return f1_score

train_and_evaluate_trigram(Xtrain[0:60000], Ytrain[0:60000], Xtest[0:60000], Ytest[0:60000])